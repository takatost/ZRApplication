package com.zr.deliver.biz;import android.content.ContentResolver;import android.content.Context;import android.database.Cursor;import android.graphics.Bitmap;import android.support.v4.util.LruCache;import android.util.Log;import com.android.volley.toolbox.ImageLoader;import com.android.volley.toolbox.Volley;import com.zr.deliver.OrderProvider;import com.zr.deliver.model.OrderDetail;import java.util.ArrayList;import java.util.List;/** * Created by Administrator on 2015/7/3. */public class OrderDetailBiz implements IOrderDetailBiz {    private ContentResolver resolver;    private ImageLoader imageLoader;    public OrderDetailBiz(Context context) {        resolver = context.getContentResolver();        imageLoader = new ImageLoader(Volley.newRequestQueue(context), new BitmapCache());    }    @Override    public List<OrderDetail> queryDetailData(int orderId) {        Cursor c = resolver.query(OrderProvider.GOOD_URI,                OrderProvider.GOOD_PROJECTION, "order_id=?",                new String[]{orderId + ""}, null);        List<OrderDetail> goodList = null;        if (c != null && c.getCount() > 0) {            goodList = new ArrayList<>();            c.moveToFirst();            do {                OrderDetail goods = new OrderDetail();                goods.goodsid = c.getInt(c                        .getColumnIndex(OrderProvider.GOOD_ID));                goods.price = c.getFloat(c                        .getColumnIndex(OrderProvider.GOOD_PRICE));                goods.buynum = c.getInt(c                        .getColumnIndex(OrderProvider.GOOD_NUM));                goods.icon = c.getString(c                        .getColumnIndex(OrderProvider.GOOD_ICON));                Log.e("TAG", "Õº∆¨µÿ÷∑" + goods.icon);                goods.goodsname = c.getString(c                        .getColumnIndex(OrderProvider.GOOD_NAME));                goodList.add(goods);            } while (c.moveToNext());            c.close();        }        return goodList;    }    @Override    public ImageLoader createImageLoder() {        return imageLoader;    }    @Override    public String calculationTotalPrice(List<OrderDetail> goodsList) {        if (goodsList == null || goodsList.size() == 0) {            return 0 + "";        } else {            float totalprice = 0;            for (OrderDetail order : goodsList) {                totalprice += order.price * order.buynum;            }            return totalprice + "";        }    }    @Override    public String calculationTotalNum(List<OrderDetail> goodsList) {        // TODO Auto-generated method stub        if (goodsList == null || goodsList.size() == 0) {            return 0 + "";        } else {            int totalNum = 0;            for (OrderDetail order : goodsList) {                totalNum += order.buynum;            }            return totalNum + "";        }    }    public class BitmapCache implements ImageLoader.ImageCache {        private LruCache<String, Bitmap> mCache;        public BitmapCache() {            int maxSize = 10 * 1024 * 1024;            mCache = new LruCache<String, Bitmap>(maxSize) {                @Override                protected int sizeOf(String key, Bitmap bitmap) {                    return bitmap.getRowBytes() * bitmap.getHeight();                }            };        }        @Override        public Bitmap getBitmap(String url) {            return mCache.get(url);        }        @Override        public void putBitmap(String url, Bitmap bitmap) {            mCache.put(url, bitmap);        }    }}